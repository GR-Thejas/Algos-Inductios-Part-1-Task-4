#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;


int main() {
    int n,k,i,j,a[100000];
    int backward[100000],forward[100000],m1,m2=0;
    cin>>n>>k;
    for(  i = 0 ; i < n ; i++ )
        cin>>a[i];
    forward[0]=a[0];
    
    // Computing the maximum obtained by just moving forwards, regardless of number of tiles we are jumping.
    for(  i = 1 ; i < n ; i++ )
        forward[i]=max(forward[i-1]+a[i],a[i]); //Memoization, in which we either consider all the previous tiles from start, 
                                                //or just take present tile,neglecting all the previous ones, whichever is maximum.
    backward[n-1]=a[n-1];
    // Similar thing what we did in forward, when we start walking from back,
    //as it would be similar to the sum we would obtain if we land at that tile & consider.
    for(  i = n-2 ; i >=  0 ; i-- )
        backward[i]=max(backward[i+1]+a[i],a[i]);
    for(  i = 0 ; i < n ; i++ ){
        m1=0;
        //Implementig the constraint of jumping atmost k tiles atmost one time.
        for(  j=i+1 ; j  <min(i+k+2,n)  ; j++ )
            if(backward[j]>m1)
                m1=backward[j];
        if(forward[i]+m1>m2)
            m2=forward[i]+m1;
    }
    cout<<m2;  
    return 0;
}
